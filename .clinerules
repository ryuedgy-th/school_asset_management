# School Asset Management - Development Rules

## Project Context
This is an Odoo 19 module for school asset management with PDPA compliance.
Current phase: Code improvement and refactoring before implementing new wizards.
Odoo Server อยู่ที่ root@128.199.203.205, SSHkey:~/.ssh/RyusOpen, ModulePath:opt/odoo19/custom_addons/school_asset_management/
## Documentation Files (READ THESE FIRST)
- IMPROVEMENT_PLAN.md: List of issues and priorities (Gemini analysis + Claude feedback)
- IMPROVEMENT_WORKFLOW.md: Task-by-task prompts with implementation details
- ODOO19_BEST_PRACTICES.md: Complete Odoo 19 coding standards
- DEVELOPMENT_PLAN.md: Future wizard development plan

## CRITICAL: Odoo 19 Best Practices (MANDATORY)

### Python Standards
- ✅ USE: `from odoo import models, fields, api, _`
- ✅ USE: `logging.getLogger(__name__)` for logging
- ✅ USE: ORM API only (search, create, write, unlink)
- ✅ USE: `@api.depends` for computed fields
- ✅ USE: `@api.model` for class methods
- ✅ USE: Type hints: `def method(self, param: str) -> bool:`
- ✅ USE: Docstrings (Google style) for all classes/methods
- ✅ USE: `self.env['ir.config_parameter'].get_param()` for config
- ✅ USE: `self.env['model.name']` for accessing models
- ✅ USE: Exception handling with try-except and logging

- ❌ NEVER: `print()` statements (use `_logger` instead)
- ❌ NEVER: Raw SQL queries (use ORM)
- ❌ NEVER: Loop for batch operations (use `records.write()`)
- ❌ NEVER: N+1 queries (use `mapped()` or prefetch)
- ❌ NEVER: Missing `_description` in models (required in Odoo 19)
- ❌ NEVER: Hardcoded values (use config parameters)

### XML View Standards (Odoo 19)
- ✅ USE: `<list>` tag (NOT `<tree>` - deprecated in Odoo 19)
- ✅ USE: `invisible` attribute (NOT `attrs` - deprecated)
- ✅ USE: `widget="badge"` for state fields
- ✅ USE: Proper view structure (header → sheet → chatter)
- ✅ USE: `<form>`, `<list>`, `<search>`, `<kanban>`

- ❌ NEVER: `<tree>` tags (use `<list>`)
- ❌ NEVER: `attrs` attribute (use `invisible`, `readonly`, `required`)
- ❌ NEVER: `widget="boolean_button"` (use `widget="boolean"`)

### Controller Standards
- ✅ USE: `from odoo import http` and `from odoo.http import request`
- ✅ USE: `request.env['model.name']` for database access
- ✅ USE: Proper route definition with `@http.route()`
- ✅ USE: `type='http'` for web pages, `type='json'` for APIs
- ✅ USE: Input validation for all parameters
- ✅ USE: Error handling with try-except
- ✅ USE: Security audit logging

- ❌ NEVER: Direct database access without validation
- ❌ NEVER: Missing CSRF protection (unless intentional with documentation)

### JavaScript Standards (Odoo 19)
- ✅ USE: `/** @odoo-module **/` for OWL components
- ✅ USE: `import { Component } from "@odoo/owl"`
- ✅ USE: Legacy format if needed: `odoo.define('module.Class', function(require) {...})`
- ✅ USE: Proper error handling and logging

### Security Rules
- ✅ USE: `ir.model.access.csv` for model-level access rights
- ✅ USE: `ir.rule` for record-level security
- ✅ USE: `sudo()` only when necessary with validation
- ✅ USE: Input validation for all user inputs
- ✅ USE: Security audit logging for sensitive operations

### Module Structure
```
school_asset_management/
├── __init__.py
├── __manifest__.py
├── models/
├── views/
├── security/
│   ├── security.xml
│   └── ir.model.access.csv
├── data/
├── controllers/
├── static/src/
├── templates/
├── reports/
├── wizards/
└── tests/
```

### Field Definitions
```python
field_name = fields.Type(
    string='Label',           # Required
    required=True,            # If mandatory
    index=True,              # If searchable
    copy=False,              # If shouldn't duplicate
    help='Description',       # User-facing help
    tracking=True,           # For mail tracking
)
```

### Email Templates
- ✅ USE: Proper `mail.template` structure
- ✅ USE: MYIS brand colors (Purple #574193, Green #6ab42d)
- ✅ USE: Responsive HTML
- ✅ USE: `${object.field}` syntax for dynamic content

### Performance Best Practices
- ✅ USE: Batch operations: `records.write({'field': value})`
- ✅ USE: `mapped()` for extraction: `records.mapped('partner_id.email')`
- ✅ USE: `filtered()` for filtering: `records.filtered(lambda r: r.state == 'draft')`
- ✅ USE: `search_read()` for list views
- ✅ USE: `exists()` to check existence

## Current Improvement Phases

### Phase 1: CRITICAL (Must do before production)
1. Redis Rate Limiting - Fix in-memory dict issue (multi-worker env)
2. External Dependencies - Add Pillow and redis to __manifest__.py

### Phase 2: HIGH PRIORITY (Must do before wizards)
1. HMAC Token Security - Replace UUID with HMAC-SHA256 + expiration
2. Token Decorator - Reduce code duplication in controllers
3. PDPA Email Templates - Complete missing email notifications

### Phase 3: RELIABILITY
1. Bundle Font File - Include fonts in module
2. JavaScript Refactoring - Create base class for signature pads

### Phase 4: CLEANUP
1. Remove obsolete files and fix data

## When Writing Code

### Always Check:
1. Read ODOO19_BEST_PRACTICES.md for the relevant section
2. No `print()` statements (use `_logger`)
3. No raw SQL (use ORM)
4. All models have `_description`
5. All methods have docstrings
6. Use `<list>` not `<tree>` in views
7. Use `invisible` not `attrs`
8. User-facing strings use `_()`
9. Exception handling present
10. Security audit logging for sensitive ops

### Before Committing:
```bash
# Check for violations
grep -r "print(" school_asset_management/  # Should return nothing
grep -r "<tree" school_asset_management/views/  # Should return nothing

# Test
odoo-bin -d db -u school_asset_management --test-enable

# Validate manifest
python3 -c "import ast; ast.parse(open('__manifest__.py').read())"
```

### Commit Message Format:
```
feat: [description]      # New feature
fix: [description]       # Bug fix
refactor: [description]  # Code refactoring
docs: [description]      # Documentation
test: [description]      # Tests
chore: [description]     # Maintenance
```

## Current Module Status
- Core models: ✅ 100% complete
- Views: ✅ Odoo 19 compliant
- Security: ✅ Implemented
- PDPA: ✅ Implemented
- Wizards: ⏳ Partially implemented (consent_withdrawal only)
- Pending: teacher_checkout, teacher_checkin, student_distribution, student_collection wizards

## Code Quality Checklist
- [ ] Follows PEP 8
- [ ] No print statements
- [ ] No raw SQL
- [ ] All models have _description
- [ ] Docstrings present
- [ ] Type hints used
- [ ] Exception handling
- [ ] Input validation
- [ ] Security logging
- [ ] Tests pass
- [ ] No deprecation warnings

## Testing Strategy
```bash
# Unit tests
odoo-bin -d db -u school_asset_management --test-enable --stop-after-init

# Specific test class
odoo-bin -d db --test-tags=TestClassName

# Code quality
flake8 school_asset_management/
```

## References
- Odoo 19 Docs: https://www.odoo.com/documentation/19.0/
- ORM API: https://www.odoo.com/documentation/19.0/developer/reference/backend/orm.html
- Views: https://www.odoo.com/documentation/19.0/developer/reference/backend/views.html

## Special Notes
- This is a PDPA-compliant system - always log security events
- Use MYIS brand colors: Purple #574193, Green #6ab42d
- All signatures use watermarks (signature_watermark.py)
- Token-based authentication for public signature pages
- Rate limiting required for public endpoints
- Multi-worker environment in production (need Redis)

## When Asked to Implement Features
1. Check if it's in IMPROVEMENT_WORKFLOW.md first (improvement tasks take priority)
2. Follow the exact prompt structure from workflow file
3. Reference ODOO19_BEST_PRACTICES.md for code standards
4. Include proper error handling and logging
5. Add security audit logs for sensitive operations
6. Write docstrings and comments
7. Follow Odoo 19 standards strictly

## When Reviewing Code
- Point out violations of Odoo 19 standards
- Suggest ORM alternatives to raw SQL
- Flag missing error handling
- Identify security issues
- Check for deprecated syntax (<tree>, attrs, etc.)
- Verify proper logging usage

## Priority Order
1. Fix CRITICAL issues (Phase 1) - blocks production
2. Fix HIGH issues (Phase 2) - blocks wizard development
3. Reliability improvements (Phase 3)
4. Code cleanup (Phase 4)
5. New wizard development (after Phase 1-2)
